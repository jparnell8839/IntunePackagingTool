<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAxHRTiMR0U4jEdFOIxHRTiMR0U4jEdFOIxHRTiMR0U4jEdFOIxHRTiMR0U9T4qH/9HMib/RzIm/0cy
        Jv9HMib/RzIm/0cyJv9HMib/RzIm/z4qH/8xHRT1MR0U4jEdFOIxHRTiMR0U4jEdFOIxHRTiMR0U4jEd
        FOIxHRTiMR0U4jEdFCYxHRQmMR0UJjEdFCYxHRQmMR0UJjEdFCYxHRQmMR0UJjEdFCgxHRS2iW9b/8Wm
        iv/Co4j/wqOI/8KjiP/Co4j/wqOI/8KjiP/Fpor/iW9b/zEdFLYxHRQoMR0UJjEdFCYxHRQmMR0UJjEd
        FCYxHRQmMR0UJjEdFCYxHRQmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxHRQALxsTATEd
        FJdELyP9WEI0/11GOP9dRjj/XUY4/11GOP9dRjj/XUY4/1hCNP9ELyP9MR0Uly8bEwExHRQAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADEd
        FAAxHRQAMR0UGS4aErSCaVb/waOI/8Chhv+/oIb/v6CG/8Chhv/Bo4j/gmlW/y4aErQxHRQZMR0UADEd
        FAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAADEdFAA3IxkAMR0UlEkzJ/dcRDbzWkI0+l1GN/9dRjf/WkI0+lxENvNJMyf3MR0UlDcj
        GQAxHRQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAMR0UADEdFAAxHRQdKxcPOyYSDDgrFw+me2FP/3thT/8rFw+mJhIMOCsX
        DzsxHRQdMR0UADEdFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxHRQAMR0UACwYEIyWemT/lnpk/ywY
        EIwxHRQAMR0UAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADEdFAAxHRQALBkQjJR5
        Y/+UeWP/LBkQjDEdFAAxHRQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAMBwTAiwZEAMrGA8DKxgPAysYDwMrGA8DKxgPAysYDwMrGA8DKxgPAysYDwMrGA8DKxgPAw0A
        AAAsGRCNk3di/5N3Yv8sGRCNDQAAACsYDwMrGA8DKxgPAysYDwMrGA8DKxgPAysYDwMrGA8DKxgPAysY
        DwMrGA8DLBkQAzAcEwIxHRSlMh4VrjIeFa4yHhWuMh4VrjIeFa4yHhWuMh4VrjIeFa4yHhWuMh4VrjIe
        Fa4yHhWuMh4VrTEdFNtQOi3/UDot/zEdFNsyHhWtMh4VrjIeFa4yHhWuMh4VrjIeFa4yHhWuMh4VrjIe
        Fa4yHhWuMh4VrjIeFa4yHhWuMR0UpT4pH/+YfGf/rI93/6uOdv+rjnb/q452/6uOdv+rjnb/q452/6uO
        dv+rjnb/q452/6uOdv+rjnb/rI93/6uOdv+rjnb/rI93/6uOdv+rjnb/q452/6uOdv+rjnb/q452/6uO
        dv+rjnb/q452/6uOdv+rjnb/rI93/5h8Z/8+KR//OSQa/W9WRv97YU//emBO/3pgTv96YE7/emBO/3pg
        Tv96YE7/emBO/3pgTv97YU//emFP/3phT/96YU//emFP/3phT/96YU//emFP/3phT/97YU//emBO/3pg
        Tv96YE7/emBO/3pgTv96YE7/emBO/3pgTv97YU//b1ZG/zkkGv0vGxJzOCMZ6o1yXv+ihm//oYVu/6GF
        bv+hhW7/oYVu/6GFbv+hhW7/oYVu/1dAMv8pFQ2nKRUNZikVDWkpFQ1pKRUNaSkVDWkpFQ1mKRUNp1dA
        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
        Ag/gBB4P8EAeD/AAPAfwQDwH8HH+D/B//x8=
</value>
  </data>
</root>